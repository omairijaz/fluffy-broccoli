{"version":3,"sources":["components/subEntry.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SubEntry","className","this","props","name","onClick","unsubscribe","React","Component","App","state","username","subs","getOauthToken","form","document","createElement","setAttribute","p","p2","i","input","appendChild","body","submit","m","params","regex","exec","URL","window","location","href","hash","substring","decodeURIComponent","Object","keys","length","localStorage","setItem","JSON","stringify","console","log","access_token","axios","get","then","response","unshift","allSubs","map","sub","index","key","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uSAqBeA,G,6LAXX,OACE,yBAAKC,UAAU,YACb,2BAAIC,KAAKC,MAAMC,MACf,4BAAQH,UAAU,QAAQI,QAASH,KAAKC,MAAMG,aAA9C,oB,GALeC,IAAMC,Y,iBCqFdC,E,2MAlFbC,MAAe,CACbC,SAAU,GACVC,KAAM,I,EA4BRC,cAAgB,WACd,IACIC,EAAOC,SAASC,cAAc,QAClCF,EAAKG,aAAa,SAAU,UAC5BH,EAAKG,aAAa,SAAU,OAC5BH,EAAKG,aAAa,SAJG,gDAYrB,IAPA,IAAIC,EAAI,CAAC,YAAa,eAAgB,gBAAiB,SACnDC,EAAK,CACP,4EACA,wBACA,QACA,2CAEOC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAAQN,SAASC,cAAc,SACnCK,EAAMJ,aAAa,OAAQ,UAC3BI,EAAMJ,aAAa,OAAQC,EAAEE,IAC7BC,EAAMJ,aAAa,QAASE,EAAGC,IAC/BN,EAAKQ,YAAYD,GAEnBN,SAASQ,KAAKD,YAAYR,GAC1BA,EAAKU,U,mFAlCL,IAHA,IAEEC,EAFEC,EAAiC,GACjCC,EAAQ,oBAEJF,EAAIE,EAAMC,KAAK,IAAIC,IAAIC,OAAOC,SAASC,MAAMC,KAAKC,UAAU,KAClER,EAAOS,mBAAmBV,EAAE,KAAOU,mBAAmBV,EAAE,IAEtDW,OAAOC,KAAKX,GAAQY,OAAS,GAC/BC,aAAaC,QAAQ,qBAAsBC,KAAKC,UAAUhB,IAE5DiB,QAAQC,IAAIlB,EAAOmB,gB,oCAInB,MAAO,a,gCAiCP,OALAC,IACGC,IACC,qHAEDC,MAAK,SAAAC,GAAQ,OAAIN,QAAQC,IAAIK,MACzB,CAAC,YAAa,YAAa,e,+BAIlC/C,KAAKQ,MAAME,KAAKsC,QAAQ,gBACxB,IAAIC,EAAUjD,KAAKQ,MAAME,KAAKwC,KAAI,SAACC,EAAKC,GAAN,OAChC,wBAAIC,IAAKD,GACP,kBAAC,EAAD,CAAUlD,KAAMiD,EAAK/C,YAAa,mBAItC,OACE,yBAAKL,UAAU,OACb,4DACA,4BAAKC,KAAKQ,MAAMC,UAChB,4BAAQN,QAASH,KAAKW,eAAtB,aACCsC,O,GA7ES5C,IAAMC,WCEJgD,QACW,cAA7B1B,OAAOC,SAAS0B,UAEe,UAA7B3B,OAAOC,SAAS0B,UAEhB3B,OAAOC,SAAS0B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS7C,SAAS8C,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,kB","file":"static/js/main.13a97dae.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./subEntry.css\";\r\n\r\ninterface Props {\r\n  name?: string;\r\n  unsubscribe: () => any;\r\n}\r\n\r\nclass SubEntry extends React.Component<Props> {\r\n  render() {\r\n    return (\r\n      <div className=\"subEntry\">\r\n        <p>{this.props.name}</p>\r\n        <button className=\"unsub\" onClick={this.props.unsubscribe}>\r\n          Unsubscribe\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubEntry;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport SubEntry from \"./components/subEntry\";\r\nimport axios from \"axios\";\r\n\r\ninterface State {\r\n  username: string;\r\n  subs: string[];\r\n}\r\n\r\nclass App extends React.Component {\r\n  state: State = {\r\n    username: \"\",\r\n    subs: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    // let token = this.getOauthToken();\r\n    // let un = this.getUsername();\r\n    // let sorbs = this.getSubs();\r\n    // this.setState({\r\n    //   username: un,\r\n    //   subs: sorbs,\r\n    // });\r\n\r\n    var params: { [key: string]: any } = {};\r\n    var regex = /([^&=]+)=([^&]*)/g,\r\n      m;\r\n    while ((m = regex.exec(new URL(window.location.href).hash.substring(1)))) {\r\n      params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\r\n    }\r\n    if (Object.keys(params).length > 0) {\r\n      localStorage.setItem(\"oauth2-test-params\", JSON.stringify(params));\r\n    }\r\n    console.log(params.access_token);\r\n  }\r\n\r\n  getUsername(): string {\r\n    return \"Username\";\r\n  }\r\n\r\n  getOauthToken = () => {\r\n    let oauth2Endpoint = \"https://accounts.google.com/o/oauth2/v2/auth\";\r\n    let form = document.createElement(\"form\");\r\n    form.setAttribute(\"target\", \"_blank\");\r\n    form.setAttribute(\"method\", \"GET\");\r\n    form.setAttribute(\"action\", oauth2Endpoint);\r\n    let p = [\"client_id\", \"redirect_uri\", \"response_type\", \"scope\"];\r\n    let p2 = [\r\n      \"1065759368920-rqertu1ir6c2jpmema2uqto2pg4m4aca.apps.googleusercontent.com\",\r\n      \"http://localhost:3000\",\r\n      \"token\",\r\n      \"https://www.googleapis.com/auth/youtube\"\r\n    ];\r\n    for (let i = 0; i < 4; i++) {\r\n      let input = document.createElement(\"input\");\r\n      input.setAttribute(\"type\", \"hidden\");\r\n      input.setAttribute(\"name\", p[i]);\r\n      input.setAttribute(\"value\", p2[i]);\r\n      form.appendChild(input);\r\n    }\r\n    document.body.appendChild(form);\r\n    form.submit();\r\n  };\r\n\r\n  getSubs(): string[] {\r\n    axios\r\n      .get(\r\n        \"https://www.googleapis.com/youtube/v3/subscriptions?part=id&mine=true&key=AIzaSyCjtG0WC3UFCudri6h5RK9ZaqM_Uc5XizU\"\r\n      )\r\n      .then(response => console.log(response));\r\n    return [\"channel 1\", \"channel 2\", \"channel 3\"];\r\n  }\r\n\r\n  render() {\r\n    this.state.subs.unshift(\"Channel Name\");\r\n    let allSubs = this.state.subs.map((sub, index) => (\r\n      <li key={index}>\r\n        <SubEntry name={sub} unsubscribe={() => {}} />\r\n      </li>\r\n    ));\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h2>YouTube Subscription Manager</h2>\r\n        <h3>{this.state.username}</h3>\r\n        <button onClick={this.getOauthToken}>Authorize</button>\r\n        {allSubs}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}